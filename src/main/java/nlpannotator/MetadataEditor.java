package nlpannotator;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collections;
import java.util.Map;
import java.util.Vector;
import java.util.stream.Collectors;

public class MetadataEditor extends JFrame {
    private JTable table1;
    private JPanel panel1;
    private JButton addRowButton;
    private JButton keepChangesButton;
    private Main annotatorUI;

    public MetadataEditor(Main annotatorUI) {
        this.annotatorUI = annotatorUI;

        setTitle("Metadata Editor");
        setContentPane(panel1);
        setLocation(annotatorUI.getLocationOnScreen());
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        pack();
        setVisible(true);
    }

    public static void main(String[] args) {
        MetadataEditor metadataEditor = new MetadataEditor(null);

        metadataEditor.populate(null);
    }

    public void populate(Map<Object, Object> document) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("Key");
        tableModel.addColumn("Value");

        for (Map.Entry entry : document.entrySet()) {
            String key = entry.getKey().toString();
            Object value = entry.getValue();
            if (value instanceof String) {
                tableModel.addRow(new Object[]{key, value.toString()});
            } else if (value instanceof java.util.List) {
                tableModel.addRow(new Object[]{key, ((java.util.List) value).get(0).toString()});
            }
        }

        table1.setModel(tableModel);

        addRowButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                tableModel.addRow(new Object[]{"", ""});
            }
        });

        keepChangesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                Map<Object, Object> doc = (Map<Object, Object>) tableModel.getDataVector().stream().collect(Collectors.toMap(p -> ((Vector) p).get(0), p -> ((Vector) p).get(1)));
                annotatorUI.updateMetadata(doc);
                setVisible(false);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        scrollPane1.setViewportView(table1);
        addRowButton = new JButton();
        addRowButton.setText("Add Row");
        panel1.add(addRowButton, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        keepChangesButton = new JButton();
        keepChangesButton.setText("Keep Changes");
        panel1.add(keepChangesButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
