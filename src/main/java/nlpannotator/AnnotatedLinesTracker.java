package nlpannotator;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;
import java.util.TreeMap;

public class AnnotatedLinesTracker extends JFrame {
    private JTable annotatedLines;
    private JPanel panel1;
    private JCheckBox onlyShowSelectedAnnotationsCheckBox;
    private Main annotatorUI;

    private DefaultTableModel tableModel;

    public AnnotatedLinesTracker(Main annotatorUI) {
        this.annotatorUI = annotatorUI;

        setTitle("Annotated Lines Tracker");
        setContentPane(panel1);
        if (annotatorUI != null) {
            setLocation(annotatorUI.getLocationOnScreen());
        }
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        pack();

        init();
    }

    private void init() {
        annotatedLines.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (annotatedLines.getSelectedRow() != -1) {
                    String text = annotatedLines.getModel().getValueAt(annotatedLines.getSelectedRow(), 1).toString();
                    annotatorUI.navigateToLine(text);
                }
            }
        });

        onlyShowSelectedAnnotationsCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                annotatorUI.updateAnnotatedLinesList();
            }
        });
    }

    public boolean inSelectedAnnotationMode() {
        return onlyShowSelectedAnnotationsCheckBox.isSelected();
    }

    public void update(TreeMap<Integer, String> annotations) {
        tableModel = new DefaultTableModel();
        tableModel.addColumn("Line #");
        tableModel.addColumn("Text");

        for (Map.Entry<Integer, String> entry : annotations.entrySet()) {
            int line = entry.getKey();
            String annotation = entry.getValue();
            tableModel.addRow(new Object[]{line, annotation});
        }

        annotatedLines.setModel(tableModel);
        annotatedLines.getColumnModel().getColumn(0).setMaxWidth(50);
        annotatedLines.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        annotatedLines.setDefaultEditor(Object.class, null);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(1500, 400), null, 0, false));
        annotatedLines = new JTable();
        scrollPane1.setViewportView(annotatedLines);
        final JLabel label1 = new JLabel();
        label1.setText("All Annotated Lines:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        onlyShowSelectedAnnotationsCheckBox = new JCheckBox();
        onlyShowSelectedAnnotationsCheckBox.setText("Only Show Selected Annotations");
        panel1.add(onlyShowSelectedAnnotationsCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
